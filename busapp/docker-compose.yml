version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-invoicer_dev}
      POSTGRES_USER: ${DATABASE_USER:-invoicer}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-change_me_in_prod}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - invoicer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${DATABASE_USER:-invoicer}:${DATABASE_PASSWORD:-change_me_in_prod}@db:5432/${DATABASE_NAME:-invoicer_dev}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${APP_PORT:-3000}:3000"
    networks:
      - invoicer-network
    depends_on:
      db:
        condition: service_healthy
    command: npm run dev
    profiles:
      - dev

  # Next.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DATABASE_USER:-invoicer}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME:-invoicer_prod}
      - SESSION_SECRET=${SESSION_SECRET}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN:-}
      - WHATSAPP_APP_SECRET=${WHATSAPP_APP_SECRET:-}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID:-}
    volumes:
      - upload-data:/app/uploads
    ports:
      - "${APP_PORT:-3000}:3000"
    networks:
      - invoicer-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - prod

  # Caddy (Reverse Proxy & HTTPS)
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - invoicer-network
    depends_on:
      - app
    profiles:
      - prod

networks:
  invoicer-network:
    driver: bridge

volumes:
  postgres-data:
  upload-data:
  caddy-data:
  caddy-config:


